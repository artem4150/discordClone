version: "3.8"

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: nestuser
      POSTGRES_PASSWORD: nestpass
      POSTGRES_DB: authdb
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d
    networks:
      - backend

  traefik:
    image: traefik:v2.10
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.letsencrypt.acme.email=${LE_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
    ports:

      - "${TRAEFIK_HTTP_PORT}:80"
      - "${TRAEFIK_HTTPS_PORT}:443"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./acme:/letsencrypt
    networks:
      - backend


  frontend:
    build:
      context: ./my-next-app
      dockerfile: Dockerfile
      args:
        # совпадает с тем, что слушает Kong (API-gateway)
        NEXT_PUBLIC_API_URL: https://api.${DOMAIN}
        NEXT_PUBLIC_WS_URL: wss://api.${DOMAIN}
    image: myorg/frontend:latest
    depends_on:
      - kong
    environment:
      # дублируем на случай, если какие-то пакеты читают её в рантайме
      - NEXT_PUBLIC_API_URL=https://api.${DOMAIN}
      - NEXT_PUBLIC_WS_URL=wss://api.${DOMAIN}
    ports:
      - "3001:3001"       # <-- 3006:3000, чтобы не конфликтовать с другими сервисами
    networks:
      - backend
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.frontend.entrypoints=web,websecure
      - traefik.http.routers.frontend.tls.certresolver=letsencrypt
      - traefik.http.services.frontend.loadbalancer.server.port=3001


  kong:
    image: kong:3
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
    ports:
      - "8000:8000"
      - "8001:8001"
    volumes:
      - ./api-gateway/kong.yml:/etc/kong/kong.yml       # <-- если переместили файл в корень
      # - ./api-gateway/kong.yml:/etc/kong/kong.yml  # <-- или этот, если файл действительно здесь 
    depends_on:
      - postgres
    networks:
      - backend
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`api.${DOMAIN}`)
      - traefik.http.routers.api.entrypoints=web,websecure
      - traefik.http.routers.api.tls.certresolver=letsencrypt
      - traefik.http.services.api.loadbalancer.server.port=8000

  auth-service:
    build: ./auth-service
    depends_on:
      - postgres
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: nestuser
      DB_PASS: nestpass
      DB_NAME: authdb
      JWT_SECRET: verysecret
    ports:
      - "3000:3000"
    networks:
      - backend

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com   # ваш логин
      PGADMIN_DEFAULT_PASSWORD: admin          # ваш пароль
    ports:
      - "5050:80"                              # на каком порту будет доступен pgAdmin
    depends_on:
      - postgres
    networks:
      - backend



  guild-service:
    build:
      context: ./guild-service
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgres://nestuser:nestpass@postgres:5432/authdb?sslmode=disable
      - JWT_SECRET=verysecret
      - PORT=8080
    depends_on:
      - postgres
    networks:
      - backend

  channel-service:
    build:
      context: ./channel-service
      dockerfile: Dockerfile
    image: myorg/channel-service:latest
    depends_on:
      - postgres
    environment:
      - DATABASE_URL=postgres://nestuser:nestpass@postgres:5432/authdb?sslmode=disable
      - JWT_SECRET=verysecret
      - PORT=8080
    ports:
      - "3003:8080"
    networks:
      - backend

  chat-service:
    build:
      context: ./chat-service
      dockerfile: Dockerfile
    image: myorg/chat-service:latest
    depends_on:
      - cassandra
    environment:
      - CASSANDRA_HOST=cassandra
      - CASSANDRA_KEYSPACE=chats
      - JWT_SECRET=verysecret
      - PORT=8080
      - ALLOW_ORIGINS=https://${DOMAIN}
    ports:
      - "3004:8080"
    networks:
      - backend

  cassandra:
    image: cassandra:4
    ports:
      - "9042:9042"
    environment:
      - MAX_HEAP_SIZE=512M
      - HEAP_NEWSIZE=100M
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "DESCRIBE KEYSPACES"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  voice-service:
    build:
      context: ./voice-service
      dockerfile: Dockerfile
    image: myorg/voice-service:latest
    depends_on:
      - redis
    environment:
      - REDIS_ADDR=redis:6379
      - JWT_SECRET=verysecret
      - PORT=8080
    ports:
      - "3005:8080"
    networks:
      - backend

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    networks:
      - backend
      
  kafka:
    image: confluentinc/cp-kafka:7.5.2
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  turn-server:
    image: coturn/coturn:latest
    container_name: turn-server
    restart: unless-stopped
    network_mode: host  # Важно для локальной разработки!
    environment:
      - TURN_SECRET=${TURN_SECRET}
      - REALM=${REALM}
      - EXTERNAL_IP=${EXTERNAL_IP}
    command: >
      --fingerprint
      --lt-cred-mech
      --use-auth-secret
      --realm=${REALM}
      --external-ip=${EXTERNAL_IP}
      --min-port=49152
      --max-port=65535
      --verbose
    ports:
      - "3478:3478/tcp"
      - "3478:3478/udp"
      - "5349:5349/tcp"

volumes:
  pg_data:

networks:
  backend:
    driver: bridge
